-e 
FILE: LICENSE
MIT License

Copyright (c) 2025 Irina Dimitrieva

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
-e 
-----
-e 
FILE: docker/docker-compose.yml
services:
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: weather-app
    container_name: weather-backend
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/weather_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      SPRING_DATASOURCE_DRIVER-CLASS-NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE-PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      LOGGING_FILE_NAME: /app/logs/weather-app.log
    networks:
      weather-net:
        aliases:
          - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    entrypoint: ["sh", "-c", "sleep 15 && java -jar app.jar"]
    volumes:
      - ../src/logs:/app/logs

  postgres:
    image: postgres:13-alpine
    container_name: weather-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: weather_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      weather-net:
        aliases:
          - postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  nginx:
    image: nginx:1.23-alpine
    container_name: weather-nginx
    ports:
      - "80:80"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ../nginx/logs:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - weather-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres-data:

networks:
  weather-net:
    driver: bridge
    name: weather-app-network-e 
-----
-e 
FILE: docker/Dockerfile
# Этап сборки с официальным образом Maven
FROM maven:3.8.6-eclipse-temurin-17 AS builder

WORKDIR /app

# 1. Копируем только POM сначала (для кэширования зависимостей)
COPY pom.xml .
RUN mvn dependency:go-offline -B

# 2. Копируем исходный код
COPY src ./src

# 3. Собираем проект
RUN mvn clean package -DskipTests -B

# Финальный образ с JRE
FROM eclipse-temurin:17-jre-jammy
WORKDIR /app

# Копируем только собранный JAR
COPY --from=builder /app/target/*.jar app.jar

# Настройки
EXPOSE 8080
ENTRYPOINT ["java", "-jar", "app.jar"]-e 
-----
-e 
FILE: docker/postgres.env
POSTGRES_PASSWORD=your_strong_password-e 
-----
-e 
FILE: docs/README.MD
# Weather Application

Простое веб-приложение для отображения данных о погоде с PostgreSQL, Nginx и Docker Compose.

## Содержание
1. Требования
2. Установка
3. Использование
4. Проверка работы
5. Дополнительно

## 1. Требования
- Docker
- Docker Compose

## 2. Установка
1. Клонируйте репозиторий:
git clone <ваш-репозиторий>
cd <папка-проекта>

2. Запустите приложение:
docker-compose -f docker/docker-compose.yml up --build

## 3. Использование
Приложение доступно по адресу: http://localhost

Основные эндпоинты:
- GET /ping    → "PONG" (HTML)
- GET /health  → {"status": "HEALTHY"} (JSON)
- GET /list    → список городов с температурой (HTML)
- POST /add    → добавление нового города (параметры: city, temperature)

## 4. Проверка работы
Примеры запросов:
curl http://localhost/ping
curl http://localhost/health
curl http://localhost/list
curl -X POST -d "city=Moscow&temperature=25" http://localhost/add

## 5. Дополнительно
- Проверка БД: docker exec -it weather-postgres psql -U postgres -d weather_db
- Логи: docker logs weather-backend
- Остановка: docker-compose -f docker/docker-compose.yml down

Лицензия: MIT-e 
-----
-e 
FILE: mvnw
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"
-e 
-----
-e 
FILE: mvnw.cmd
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
-e 
-----
-e 
FILE: nginx/logs/access.log
127.0.0.1 - - [13/Jul/2025:00:35:02 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:35:12 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:35:22 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:35:32 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:35:42 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:35:52 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:36:02 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:36:12 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:36:22 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:36:32 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:36:42 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:36:52 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:37:03 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:37:13 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:37:23 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:37:33 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:37:43 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:37:53 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:38:03 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:38:13 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:38:23 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:38:33 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:38:43 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:38:53 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:39:04 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:39:14 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:39:24 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:39:34 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:39:44 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:39:54 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:40:04 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:40:14 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:40:24 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:40:34 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:40:44 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:40:54 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:41:05 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:41:15 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:41:25 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:41:35 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:41:45 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:41:55 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:42:05 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:42:15 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:42:25 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:42:35 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:42:45 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:42:56 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:43:06 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:43:16 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:43:26 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:43:36 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:43:46 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:43:56 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:44:06 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:44:16 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:44:26 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:44:36 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:44:46 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:44:57 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:45:07 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:45:17 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:45:27 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
127.0.0.1 - - [13/Jul/2025:00:45:37 +0000] "GET /health HTTP/1.1" 200 21 "-" "curl/7.88.1"
-e 
-----
-e 
FILE: nginx/logs/error.log
2025/07/13 00:34:52 [notice] 1#1: using the "epoll" event method
2025/07/13 00:34:52 [notice] 1#1: nginx/1.23.4
2025/07/13 00:34:52 [notice] 1#1: built by gcc 12.2.1 20220924 (Alpine 12.2.1_git20220924-r4) 
2025/07/13 00:34:52 [notice] 1#1: OS: Linux 6.6.87.2-microsoft-standard-WSL2
2025/07/13 00:34:52 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576
2025/07/13 00:34:52 [notice] 1#1: start worker processes
2025/07/13 00:34:52 [notice] 1#1: start worker process 29
2025/07/13 00:34:52 [notice] 1#1: start worker process 30
2025/07/13 00:34:52 [notice] 1#1: start worker process 31
2025/07/13 00:34:52 [notice] 1#1: start worker process 32
2025/07/13 00:34:52 [notice] 1#1: start worker process 33
2025/07/13 00:34:52 [notice] 1#1: start worker process 34
2025/07/13 00:34:52 [notice] 1#1: start worker process 35
2025/07/13 00:34:52 [notice] 1#1: start worker process 36
2025/07/13 00:45:41 [notice] 1#1: signal 3 (SIGQUIT) received, shutting down
2025/07/13 00:45:41 [notice] 29#29: gracefully shutting down
2025/07/13 00:45:41 [notice] 30#30: gracefully shutting down
2025/07/13 00:45:41 [notice] 30#30: exiting
2025/07/13 00:45:41 [notice] 32#32: gracefully shutting down
2025/07/13 00:45:41 [notice] 31#31: gracefully shutting down
2025/07/13 00:45:41 [notice] 33#33: gracefully shutting down
2025/07/13 00:45:41 [notice] 33#33: exiting
2025/07/13 00:45:41 [notice] 36#36: gracefully shutting down
2025/07/13 00:45:41 [notice] 34#34: gracefully shutting down
2025/07/13 00:45:41 [notice] 35#35: gracefully shutting down
2025/07/13 00:45:41 [notice] 29#29: exiting
2025/07/13 00:45:41 [notice] 30#30: exit
2025/07/13 00:45:41 [notice] 32#32: exiting
2025/07/13 00:45:41 [notice] 31#31: exiting
2025/07/13 00:45:41 [notice] 33#33: exit
2025/07/13 00:45:41 [notice] 36#36: exiting
2025/07/13 00:45:41 [notice] 34#34: exiting
2025/07/13 00:45:41 [notice] 35#35: exiting
2025/07/13 00:45:41 [notice] 29#29: exit
2025/07/13 00:45:41 [notice] 32#32: exit
2025/07/13 00:45:41 [notice] 31#31: exit
2025/07/13 00:45:41 [notice] 36#36: exit
2025/07/13 00:45:41 [notice] 34#34: exit
2025/07/13 00:45:41 [notice] 35#35: exit
2025/07/13 00:45:41 [notice] 1#1: signal 17 (SIGCHLD) received from 33
2025/07/13 00:45:41 [notice] 1#1: worker process 33 exited with code 0
2025/07/13 00:45:41 [notice] 1#1: signal 29 (SIGIO) received
2025/07/13 00:45:41 [notice] 1#1: signal 17 (SIGCHLD) received from 29
2025/07/13 00:45:41 [notice] 1#1: worker process 29 exited with code 0
2025/07/13 00:45:41 [notice] 1#1: signal 29 (SIGIO) received
2025/07/13 00:45:41 [notice] 1#1: signal 17 (SIGCHLD) received from 34
2025/07/13 00:45:41 [notice] 1#1: worker process 34 exited with code 0
2025/07/13 00:45:41 [notice] 1#1: signal 29 (SIGIO) received
2025/07/13 00:45:41 [notice] 1#1: signal 17 (SIGCHLD) received from 31
2025/07/13 00:45:41 [notice] 1#1: worker process 31 exited with code 0
2025/07/13 00:45:41 [notice] 1#1: signal 29 (SIGIO) received
2025/07/13 00:45:41 [notice] 1#1: signal 17 (SIGCHLD) received from 36
2025/07/13 00:45:41 [notice] 1#1: worker process 35 exited with code 0
2025/07/13 00:45:41 [notice] 1#1: worker process 36 exited with code 0
2025/07/13 00:45:41 [notice] 1#1: signal 29 (SIGIO) received
2025/07/13 00:45:41 [notice] 1#1: signal 17 (SIGCHLD) received from 35
2025/07/13 00:45:41 [notice] 1#1: signal 17 (SIGCHLD) received from 32
2025/07/13 00:45:41 [notice] 1#1: worker process 32 exited with code 0
2025/07/13 00:45:41 [notice] 1#1: signal 29 (SIGIO) received
2025/07/13 00:45:41 [notice] 1#1: signal 17 (SIGCHLD) received from 30
2025/07/13 00:45:41 [notice] 1#1: worker process 30 exited with code 0
2025/07/13 00:45:41 [notice] 1#1: exit
-e 
-----
-e 
FILE: nginx/nginx.conf
upstream backend {
    server weather-backend:8080;
}

server {
    listen 80;
    server_name localhost;
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    location / {
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 60s;
        proxy_read_timeout 60s;
    }

    location = /ping {
        proxy_pass http://backend/ping;
    }

    location /swagger-ui/ {
        proxy_pass http://backend/swagger-ui/;
    }

    location /v3/api-docs {
        proxy_pass http://backend/v3/api-docs;
    }
}-e 
-----
-e 
FILE: pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>weather-app</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <name>Weather Application</name>
    <description>Spring Boot Weather App</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.0</version>
        <relativePath/>
    </parent>

    <properties>
        <java.version>17</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!-- Базовые зависимости Spring Boot -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        
        <!-- База данных -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Логирование -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-logging</artifactId>
        </dependency>
        
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Работа с JSON -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>

        <!-- Для аннотаций -->
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <version>2.1.1</version>
        </dependency>

        <!-- Для разработки -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <!-- Swagger -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.5.0</version>
        </dependency>       
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.3.1</version>
                <configuration>
                    <resources>
                        <resource>
                            <directory>src/main/resources</directory>
                            <filtering>true</filtering>
                        </resource>
                        <resource>
                            <directory>src/logs</directory>
                            <targetPath>${project.build.outputDirectory}/logs</targetPath>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>-e 
-----
-e 
FILE: src/logs/weather-app.log
2025-07-13T00:34:37.217Z  INFO 14 --- [main] com.example.WeatherApp                   : Starting WeatherApp v1.0.0 using Java 17.0.15 with PID 14 (/app/app.jar started by root in /app)
2025-07-13T00:34:37.224Z  INFO 14 --- [main] com.example.WeatherApp                   : No active profile set, falling back to 1 default profile: "default"
2025-07-13T00:34:38.244Z  INFO 14 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13T00:34:38.305Z  INFO 14 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 51 ms. Found 1 JPA repository interfaces.
2025-07-13T00:34:38.958Z  INFO 14 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2025-07-13T00:34:38.967Z  INFO 14 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-07-13T00:34:38.968Z  INFO 14 --- [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.8]
2025-07-13T00:34:39.041Z  INFO 14 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-07-13T00:34:39.042Z  INFO 14 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1769 ms
2025-07-13T00:34:39.167Z  INFO 14 --- [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-07-13T00:34:39.332Z  INFO 14 --- [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1a1da881
2025-07-13T00:34:39.335Z  INFO 14 --- [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-07-13T00:34:39.435Z  INFO 14 --- [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13T00:34:39.503Z  INFO 14 --- [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.2.2.Final
2025-07-13T00:34:39.508Z  INFO 14 --- [main] org.hibernate.cfg.Environment            : HHH000406: Using bytecode reflection optimizer
2025-07-13T00:34:39.677Z  INFO 14 --- [main] o.h.b.i.BytecodeProviderInitiator        : HHH000021: Bytecode provider name : bytebuddy
2025-07-13T00:34:39.866Z  INFO 14 --- [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13T00:34:39.949Z  INFO 14 --- [main] org.hibernate.orm.dialect                : HHH035001: Using dialect: org.hibernate.dialect.PostgreSQLDialect, version: org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$DialectResolutionInfoImpl@676f0a60
2025-07-13T00:34:40.168Z  INFO 14 --- [main] o.h.b.i.BytecodeProviderInitiator        : HHH000021: Bytecode provider name : bytebuddy
2025-07-13T00:34:40.688Z  INFO 14 --- [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2025-07-13T00:34:40.762Z  INFO 14 --- [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13T00:34:41.017Z  INFO 14 --- [main] com.example.service.WeatherService       : Начато обновление данных о погоде для всех городов
2025-07-13T00:34:41.690Z  INFO 14 --- [main] com.example.service.WeatherService       : Данные для города Paris успешно обновлены: 21.9°C
2025-07-13T00:34:41.760Z  INFO 14 --- [main] com.example.service.WeatherService       : Данные для города London успешно обновлены: 19.1°C
2025-07-13T00:34:41.833Z  INFO 14 --- [main] com.example.service.WeatherService       : Данные для города Berlin успешно обновлены: 16.6°C
2025-07-13T00:34:41.834Z  INFO 14 --- [main] com.example.service.WeatherService       : Обновление данных завершено
2025-07-13T00:34:41.972Z  WARN 14 --- [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-07-13T00:34:42.483Z  INFO 14 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2025-07-13T00:34:42.492Z  INFO 14 --- [main] com.example.WeatherApp                   : Started WeatherApp in 5.809 seconds (process running for 6.37)
2025-07-13T00:34:51.481Z  INFO 14 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13T00:34:51.482Z  INFO 14 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2025-07-13T00:34:51.484Z  INFO 14 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
-e 
-----
-e 
FILE: src/main/java/com/example/config/SwaggerConfig.java
package com.example.config;

import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.info.Contact;
import io.swagger.v3.oas.annotations.info.Info;
import io.swagger.v3.oas.annotations.info.License;
import io.swagger.v3.oas.annotations.servers.Server;
import org.springframework.context.annotation.Configuration;

@Configuration
@OpenAPIDefinition(
    info = @Info(
        title = "Weather API",
        version = "3.0.2",
        description = "API для управления данными о погоде",
        contact = @Contact(
            name = "Irina Dimitrieva",
            email = "irina@example.com"
        ),
        license = @License(
            name = "MIT License",
            url = "https://opensource.org/licenses/MIT"
        )
    ),
    servers = {
        @Server(
            url = "http://localhost:8080",
            description = "Локальный сервер"
        ),
        @Server(
            url = "http://api.weather.example.com",
            description = "Продакшен сервер"
        )
    }
)
public class SwaggerConfig {
}-e 
-----
-e 
FILE: src/main/java/com/example/model/Weather.java
package com.example.model;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "weather")
@Schema(description = "Модель данных о погоде в городе")
public class Weather {
    @Id
    @Schema(description = "Название города", example = "Berlin")
    private String city;
    
    @Schema(description = "Температура в градусах Цельсия", example = "20")
    private int temperature;

    public Weather() {}

    public Weather(String city, int temperature) {
        this.city = city;
        this.temperature = temperature;
    }

    // Геттеры и сеттеры остаются без изменений
    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public int getTemperature() {
        return temperature;
    }

    public void setTemperature(int temperature) {
        this.temperature = temperature;
    }
}-e 
-----
-e 
FILE: src/main/java/com/example/repository/WeatherRepository.java
package com.example.repository;

import com.example.model.Weather;
import org.springframework.data.jpa.repository.JpaRepository;

public interface WeatherRepository extends JpaRepository<Weather, String> {
}-e 
-----
-e 
FILE: src/main/java/com/example/service/WeatherService.java
package com.example.service;

import com.example.model.Weather;
import com.example.repository.WeatherRepository;
import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.util.Map;

@Slf4j
@Service
public class WeatherService {
    private static final String API_URL = "https://api.open-meteo.com/v1/forecast";
    private final WeatherRepository weatherRepo;
    
    private static final Map<String, double[]> CITIES = Map.of(
        "Berlin", new double[]{52.52, 13.41},
        "London", new double[]{51.51, -0.13},
        "Paris", new double[]{48.85, 2.35}
    );

    @Autowired
    public WeatherService(WeatherRepository weatherRepo) {
        this.weatherRepo = weatherRepo;
    }

    @PostConstruct
    @Scheduled(fixedRateString = "${weather.update.interval}")
    public void updateAllCities() {
        log.info("Начато обновление данных о погоде для всех городов");
        CITIES.keySet().forEach(city -> {
            try {
                updateCityWeather(city);
            } catch (Exception e) {
                log.error("Ошибка при обновлении данных для города {}: {}", city, e.getMessage());
                saveDefaultTemp(city);
            }
        });
        log.info("Обновление данных завершено");
    }

    public void updateCityWeather(String city) {
        log.debug("Обновление данных для города: {}", city);
        double[] coords = CITIES.get(city);
        if (coords == null) {
            log.warn("Неизвестный город: {}", city);
            throw new IllegalArgumentException("Unknown city");
        }
        
        try {
            double temp = fetchCurrentTemperature(coords[0], coords[1]);
            weatherRepo.save(new Weather(city, (int) Math.round(temp)));
            log.info("Данные для города {} успешно обновлены: {}°C", city, temp);
        } catch (JsonProcessingException e) {
            log.error("Ошибка парсинга JSON для города {}: {}", city, e.getMessage());
            saveDefaultTemp(city);
        } catch (Exception e) {
            log.error("Неожиданная ошибка для города {}: {}", city, e.getMessage());
            saveDefaultTemp(city);
        }
    }

    private double fetchCurrentTemperature(double lat, double lon) throws JsonProcessingException {
        String url = String.format("%s?latitude=%.2f&longitude=%.2f&current_weather=true", 
                         API_URL, lat, lon);
        log.debug("Запрос к API: {}", url);
        
        String response = new RestTemplate().getForObject(url, String.class);
        JsonNode root = new ObjectMapper().readTree(response);
        
        return root.path("current_weather")
                 .path("temperature")
                 .asDouble();
    }

    private void saveDefaultTemp(String city) {
        int temp = switch(city) {
            case "Berlin" -> 18;
            case "London" -> 20;
            case "Paris" -> 15;
            default -> 10;
        };
        weatherRepo.save(new Weather(city, temp));
        log.warn("Использовано значение по умолчанию для города {}: {}°C", city, temp);
    }
}-e 
-----
-e 
FILE: src/main/java/com/example/WeatherApp.java
package com.example;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class WeatherApp {
    public static void main(String[] args) {
        SpringApplication.run(WeatherApp.class, args);
    }
}-e 
-----
-e 
FILE: src/main/java/com/example/WeatherController.java
package com.example.controller;

import com.example.model.Weather;
import com.example.repository.WeatherRepository;
import com.example.service.WeatherService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@Tag(name = "Weather API", description = "Управление данными о погоде")
public class WeatherController {
    
    private final WeatherRepository weatherRepository;
    private final WeatherService weatherService;

    public WeatherController(WeatherRepository weatherRepository, WeatherService weatherService) {
        this.weatherRepository = weatherRepository;
        this.weatherService = weatherService;
    }

    @Operation(
        summary = "Проверка сервера",
        description = "Возвращает PONG для проверки работоспособности",
        responses = {
            @ApiResponse(
                responseCode = "200",
                description = "Успешный ответ",
                content = @Content(
                    mediaType = "text/html",
                    examples = @ExampleObject("<html><body><h1>PONG</h1></body></html>")
                )
            )
        }
    )
    @GetMapping(value = "/ping", produces = MediaType.TEXT_HTML_VALUE)
    public ResponseEntity<String> ping() {
        return ResponseEntity.ok("<html><body><h1>PONG</h1></body></html>");
    }

    @Operation(
        summary = "Статус сервиса",
        description = "Проверка состояния сервиса",
        responses = {
            @ApiResponse(
                responseCode = "200",
                description = "Сервис работает",
                content = @Content(
                    mediaType = "application/json",
                    examples = @ExampleObject("{\"status\": \"HEALTHY\"}")
                )
            )
        }
    )
    @GetMapping(value = "/health", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<String> health() {
        return ResponseEntity.ok("{\"status\": \"HEALTHY\"}");
    }

    @Operation(
        summary = "Список городов",
        description = "Возвращает список городов с температурой",
        responses = {
            @ApiResponse(
                responseCode = "200",
                description = "HTML со списком городов",
                content = @Content(
                    mediaType = "text/html"
                )
            )
        }
    )
    @GetMapping(value = "/list", produces = MediaType.TEXT_HTML_VALUE)
    public ResponseEntity<String> list() {
        StringBuilder html = new StringBuilder("<html><body><ul>");
        
        List<Weather> weatherList = weatherRepository.findAll();
        for (Weather weather : weatherList) {
            html.append("<li>")
                .append(escapeHtml(weather.getCity()))
                .append(": ")
                .append(weather.getTemperature())
                .append("°C</li>");
        }
        
        html.append("</ul></body></html>");
        return ResponseEntity.ok(html.toString());
    }

    @Operation(
        summary = "Обновить данные",
        description = "Обновляет данные о погоде для всех городов",
        responses = {
            @ApiResponse(
                responseCode = "200",
                description = "Данные обновлены",
                content = @Content(
                    mediaType = "text/plain",
                    examples = @ExampleObject("Weather data updated successfully")
                )
            )
        }
    )
    @GetMapping("/update")
    public ResponseEntity<String> updateWeather() {
        weatherService.updateAllCities();
        return ResponseEntity.ok("Weather data updated successfully");
    }

    @Operation(
        summary = "Добавить город",
        description = "Добавляет новый город с температурой",
        requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(
            description = "Данные города",
            required = true,
            content = @Content(
                mediaType = "application/x-www-form-urlencoded",
                schema = @Schema(
                    implementation = AddCityRequest.class
                )
            )
        ),
        responses = {
            @ApiResponse(
                responseCode = "200",
                description = "Город добавлен",
                content = @Content(
                    mediaType = "text/html",
                    examples = @ExampleObject("<html><body><p>Город добавлен!</p></body></html>")
                )
            )
        }
    )
    @PostMapping(value = "/add", produces = MediaType.TEXT_HTML_VALUE)
    public ResponseEntity<String> add(
        @Parameter(description = "Название города", example = "Berlin") @RequestParam String city,
        @Parameter(description = "Температура в градусах Цельсия", example = "20") @RequestParam int temperature
    ) {
        Weather weather = new Weather(city, temperature);
        weatherRepository.save(weather);
        
        return ResponseEntity.ok("<html><body><p>Город добавлен!</p></body></html>");
    }

    private String escapeHtml(String input) {
        return input.replace("&", "&amp;")
                   .replace("<", "&lt;")
                   .replace(">", "&gt;");
    }

    @Schema(description = "Модель запроса для добавления города")
    private static class AddCityRequest {
        @Schema(description = "Название города", example = "Berlin", required = true)
        public String city;
        
        @Schema(description = "Температура в градусах Цельсия", example = "20", required = true)
        public int temperature;
    }
}-e 
-----
-e 
FILE: src/main/resources/application.properties
spring.jpa.hibernate.ddl-auto=update
weather.update.interval=600000 #частота запросов в open_weather
logging.file.name=/app/logs/weather-app.log
spring.datasource.url=jdbc:postgresql://localhost:5432/weather_db
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.jpa.show-sql=true

# Swagger настройки
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.operationsSorter=alpha
springdoc.version=3.0.2-e 
-----
-e 
FILE: src/main/resources/data.sql
CREATE TABLE IF NOT EXISTS weather (
    city TEXT PRIMARY KEY,
    temperature INT
);

INSERT INTO weather (city, temperature) VALUES ('London', 20), ('Paris', 15);-e 
-----
