.
├── .dockerignore
├── .mvn
│   └── wrapper
│       └── maven-wrapper.properties
├── LICENSE
├── all_files_combined.txt
├── docker
│   ├── Dockerfile
│   ├── docker-compose.yml
│   └── postgres.env
├── docs
│   ├── README.MD
│   └── Weather-app.postman_collection.json
├── mvnw
├── mvnw.cmd
├── nginx
│   ├── logs
│   │   ├── access.log
│   │   └── error.log
│   └── nginx.conf
├── pom.xml
└── src
    ├── logs
    │   └── weather-app.log
    └── main
        ├── java
        │   └── com
        │       └── example
        │           ├── WeatherApp.java
        │           ├── WeatherController.java
        │           ├── config
        │           │   └── SwaggerConfig.java
        │           ├── model
        │           │   └── Weather.java
        │           ├── repository
        │           │   └── WeatherRepository.java
        │           └── service
        │               └── WeatherService.java
        └── resources
            ├── application.properties
            └── data.sql

17 directories, 24 files


=== FILE CONTENTS ===

FILE: ./docker/docker-compose.yml
services:
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: weather-app
    container_name: weather-backend
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/weather_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      SPRING_DATASOURCE_DRIVER-CLASS-NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE-PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      LOGGING_FILE_NAME: /app/logs/weather-app.log
    networks:
      weather-net:
        aliases:
          - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    entrypoint: ["sh", "-c", "sleep 15 && java -jar app.jar"]
    volumes:
      - ../src/logs:/app/logs

  postgres:
    image: postgres:13-alpine
    container_name: weather-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: weather_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      weather-net:
        aliases:
          - postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  nginx:
    image: nginx:1.23-alpine
    container_name: weather-nginx
    ports:
      - "80:80"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ../nginx/logs:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - weather-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres-data:

networks:
  weather-net:
    driver: bridge
    name: weather-app-network
FILE: ./docker/Dockerfile
# Этап сборки с официальным образом Maven
FROM maven:3.8.6-eclipse-temurin-17 AS builder

WORKDIR /app

# 1. Копируем только POM сначала (для кэширования зависимостей)
COPY pom.xml .
RUN mvn dependency:go-offline -B

# 2. Копируем исходный код
COPY src ./src

# 3. Собираем проект
RUN mvn clean package -DskipTests -B

# Финальный образ с JRE
FROM eclipse-temurin:17-jre-jammy
WORKDIR /app

# Копируем только собранный JAR
COPY --from=builder /app/target/*.jar app.jar

# Настройки
EXPOSE 8080
ENTRYPOINT ["java", "-jar", "app.jar"]

FILE: ./nginx/nginx.conf
upstream backend {
    server weather-backend:8080;
}

server {
    listen 80;
    server_name localhost;
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    location / {
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 60s;
        proxy_read_timeout 60s;
    }

    location = /ping {
        proxy_pass http://backend/ping;
    }

    location /swagger-ui/ {
        proxy_pass http://backend/swagger-ui/;
    }

    location /v3/api-docs {
        proxy_pass http://backend/v3/api-docs;
    }
}
FILE: ./pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>weather-app</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <name>Weather Application</name>
    <description>Spring Boot Weather App</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.0</version>
        <relativePath/>
    </parent>

    <properties>
        <java.version>17</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!-- Базовые зависимости Spring Boot -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        
        <!-- База данных -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Логирование -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-logging</artifactId>
        </dependency>
        
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Работа с JSON -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>

        <!-- Для аннотаций -->
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <version>2.1.1</version>
        </dependency>

        <!-- Для разработки -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <!-- Swagger -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.5.0</version>
        </dependency>       
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.3.1</version>
                <configuration>
                    <resources>
                        <resource>
                            <directory>src/main/resources</directory>
                            <filtering>true</filtering>
                        </resource>
                        <resource>
                            <directory>src/logs</directory>
                            <targetPath>${project.build.outputDirectory}/logs</targetPath>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

FILE: ./src/main/java/com/example/config/SwaggerConfig.java
package com.example.config;

import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.info.Contact;
import io.swagger.v3.oas.annotations.info.Info;
import io.swagger.v3.oas.annotations.info.License;
import io.swagger.v3.oas.annotations.servers.Server;
import org.springframework.context.annotation.Configuration;

@Configuration
@OpenAPIDefinition(
    info = @Info(
        title = "Weather API",
        version = "3.0.2",
        description = "API для управления данными о погоде",
        contact = @Contact(
            name = "Irina Dimitrieva",
            email = "irina@example.com"
        ),
        license = @License(
            name = "MIT License",
            url = "https://opensource.org/licenses/MIT"
        )
    ),
    servers = {
        @Server(
            url = "http://localhost:8080",
            description = "Локальный сервер"
        ),
        @Server(
            url = "http://api.weather.example.com",
            description = "Продакшен сервер"
        )
    }
)
public class SwaggerConfig {
}
FILE: ./src/main/java/com/example/model/Weather.java
package com.example.model;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "weather")
@Schema(description = "Модель данных о погоде в городе")
public class Weather {
    @Id
    @Schema(description = "Название города", example = "Berlin")
    private String city;
    
    @Schema(description = "Температура в градусах Цельсия", example = "20")
    private int temperature;

    public Weather() {}

    public Weather(String city, int temperature) {
        this.city = city;
        this.temperature = temperature;
    }

    // Геттеры и сеттеры остаются без изменений
    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public int getTemperature() {
        return temperature;
    }

    public void setTemperature(int temperature) {
        this.temperature = temperature;
    }
}
FILE: ./src/main/java/com/example/repository/WeatherRepository.java
package com.example.repository;

import com.example.model.Weather;
import org.springframework.data.jpa.repository.JpaRepository;

public interface WeatherRepository extends JpaRepository<Weather, String> {
}
FILE: ./src/main/java/com/example/service/WeatherService.java
package com.example.service;

import com.example.model.Weather;
import com.example.repository.WeatherRepository;
import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.Map;

@Slf4j
@Service
public class WeatherService {
    private static final String API_URL = "https://api.open-meteo.com/v1/forecast";
    private final WeatherRepository weatherRepo;
    
    private static final Map<String, double[]> CITIES = Map.of(
        "Berlin", new double[]{52.52, 13.41},
        "London", new double[]{51.51, -0.13},
        "Paris", new double[]{48.85, 2.35}
    );

    @Autowired
    public WeatherService(WeatherRepository weatherRepo) {
        this.weatherRepo = weatherRepo;
    }

    @PostConstruct
    @Scheduled(fixedRateString = "${weather.update.interval}")
    public void updateAllCities() {
        weatherRepo.findAll().forEach(weather -> {
            try {
                updateCityWeather(weather.getCity());
            } catch (Exception e) {
                log.error("Ошибка при обновлении города {}: {}", weather.getCity(), e.getMessage());
                saveDefaultTemp(weather.getCity());
            }
        });
    }

    private void updateCityWeather(String city) throws Exception {
        double[] coords = getCityCoordinates(city);
        double temperature = fetchCurrentTemperature(coords[0], coords[1]);
        Weather weather = weatherRepo.findById(city).orElse(new Weather(city, 0));
        weather.setTemperature((int) Math.round(temperature));
        weatherRepo.save(weather);
    }

    private void saveDefaultTemp(String city) {
        Weather weather = weatherRepo.findById(city).orElse(new Weather(city, 0));
        weather.setTemperature(20); // Значение по умолчанию
        weatherRepo.save(weather);
    }

    public double[] getCityCoordinates(String city) {
        if (CITIES.containsKey(city)) {
            return CITIES.get(city);
        }
        throw new IllegalArgumentException("Город не найден: " + city);
    }

    public double fetchCurrentTemperature(double latitude, double longitude) throws Exception {
        RestTemplate restTemplate = new RestTemplate();
        String url = String.format("%s?latitude=%f&longitude=%f&current_weather=true", API_URL, latitude, longitude);
        String response = restTemplate.getForObject(url, String.class);
        
        ObjectMapper mapper = new ObjectMapper();
        JsonNode root = mapper.readTree(response);
        return root.path("current_weather").path("temperature").asDouble();
    }
}
FILE: ./src/main/java/com/example/WeatherApp.java
package com.example;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class WeatherApp {
    public static void main(String[] args) {
        SpringApplication.run(WeatherApp.class, args);
    }
}
FILE: ./src/main/java/com/example/WeatherController.java
package com.example.controller;

import com.example.model.Weather;
import com.example.repository.WeatherRepository;
import com.example.service.WeatherService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@Tag(name = "Weather API", description = "Управление данными о погоде")
public class WeatherController {
    
    private final WeatherRepository weatherRepository;
    private final WeatherService weatherService;

    public WeatherController(WeatherRepository weatherRepository, WeatherService weatherService) {
        this.weatherRepository = weatherRepository;
        this.weatherService = weatherService;
    }

    @GetMapping(value = "/ping", produces = MediaType.TEXT_HTML_VALUE)
    public ResponseEntity<String> ping() {
        return ResponseEntity.ok("<html><body><h1>PONG</h1></body></html>");
    }

    @GetMapping(value = "/health", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<String> health() {
        return ResponseEntity.ok("{\"status\": \"HEALTHY\"}");
    }

    @GetMapping(value = "/list", produces = MediaType.TEXT_HTML_VALUE)
    public ResponseEntity<String> list() {
        StringBuilder html = new StringBuilder("<html><body><ul>");
        
        List<Weather> weatherList = weatherRepository.findAll();
        for (Weather weather : weatherList) {
            html.append("<li>")
                .append(escapeHtml(weather.getCity()))
                .append(": ")
                .append(weather.getTemperature())
                .append("°C</li>");
        }
        
        html.append("</ul></body></html>");
        return ResponseEntity.ok(html.toString());
    }

    @GetMapping("/update")
    public ResponseEntity<String> updateWeather() {
        try {
            weatherService.updateAllCities();
            return ResponseEntity.ok("Weather data updated successfully");
        } catch (UnsupportedOperationException e) {
            return ResponseEntity.status(HttpStatus.NOT_IMPLEMENTED)
                .body("Weather update functionality is not implemented");
        }
    }

    @PostMapping(value = "/add", produces = MediaType.TEXT_HTML_VALUE)
    public ResponseEntity<String> add(
        @RequestParam String city,
        @RequestParam(required = false) Integer temperature,
        @RequestParam(defaultValue = "false") boolean forceUpdate
    ) {
        if (city == null || city.trim().isEmpty() || !city.matches("[a-zA-Z\\s-]+")) {
            return ResponseEntity.badRequest().body(
                errorHtml("Название города должно содержать только буквы и дефисы.")
            );
        }

        try {
            int tempToSave;
            String updateInfo = "";
            
            if (temperature != null) {
                tempToSave = temperature;
                updateInfo = "<p>Температура задана вручную. Для обновления используйте метод /update.</p>";
            } else {
                try {
                    // Проверяем доступность сервиса
                    if (weatherService == null) {
                        throw new UnsupportedOperationException("Weather service not available");
                    }
                    tempToSave = 20; // Значение по умолчанию, если сервис не реализован
                    updateInfo = "<p>Автоматическое получение температуры не реализовано. Используйте параметр temperature.</p>";
                } catch (Exception e) {
                    tempToSave = 20;
                    updateInfo = "<p>Ошибка при получении температуры: " + e.getMessage() + "</p>";
                }
            }

            if (weatherRepository.existsById(city) && !forceUpdate) {
                return ResponseEntity.badRequest().body(
                    errorHtml("Город \"" + city + "\" уже есть в базе. Используйте ?forceUpdate=true, чтобы обновить данные.")
                );
            }

            weatherRepository.save(new Weather(city, tempToSave));

            return ResponseEntity.ok(
                "<html><body><h2>Успех!</h2>" +
                "<p>Город \"" + escapeHtml(city) + "\" " + 
                (forceUpdate ? "обновлен" : "добавлен") + 
                " с температурой " + tempToSave + "°C.</p>" +
                updateInfo +
                "</body></html>"
            );

        } catch (Exception e) {
            return ResponseEntity.internalServerError().body(
                errorHtml("Ошибка при сохранении данных: " + e.getMessage())
            );
        }
    }

    @Operation(
        summary = "Удалить город или все данные",
        description = "Удаляет конкретный город или все данные из БД",
        responses = {
            @ApiResponse(
                responseCode = "200",
                description = "Удаление выполнено",
                content = @Content(
                    mediaType = "text/html"
                )
            ),
            @ApiResponse(
                responseCode = "400",
                description = "Неверные параметры запроса"
            )
        }
    )
    @DeleteMapping(value = "/delete", produces = MediaType.TEXT_HTML_VALUE)
    public ResponseEntity<String> delete(
        @RequestParam(required = false) String city,
        @RequestParam(defaultValue = "false") boolean all
    ) {
        try {
            if (all) {
                weatherRepository.deleteAll();
                return ResponseEntity.ok(
                    successHtml("Все данные о погоде успешно удалены.")
                );
            }
            
            if (city == null || city.trim().isEmpty()) {
                return ResponseEntity.badRequest().body(
                    errorHtml("Необходимо указать название города или параметр all=true")
                );
            }

            if (!weatherRepository.existsById(city)) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(
                    errorHtml("Город \"" + city + "\" не найден в базе.")
                );
            }

            weatherRepository.deleteById(city);

            return ResponseEntity.ok(
                successHtml("Город \"" + city + "\" успешно удален.")
            );
        } catch (Exception e) {
            return ResponseEntity.internalServerError().body(
                errorHtml("Ошибка при удалении данных: " + e.getMessage())
            );
        }
    }

    private String successHtml(String message) {
        return "<html><body><h2>Успех!</h2><p>" + escapeHtml(message) + "</p></body></html>";
    }

    private String errorHtml(String message) {
        return "<html><body><h2>Ошибка!</h2><p>" + escapeHtml(message) + "</p></body></html>";
    }

    private String escapeHtml(String input) {
        return input.replace("&", "&amp;")
                   .replace("<", "&lt;")
                   .replace(">", "&gt;");
    }
}
FILE: ./src/main/resources/application.properties
spring.jpa.hibernate.ddl-auto=update
weather.update.interval=600000 #частота запросов в open_weather
logging.file.name=/app/logs/weather-app.log
spring.datasource.url=jdbc:postgresql://localhost:5432/weather_db
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.jpa.show-sql=true

# Swagger настройки
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.operationsSorter=alpha
springdoc.version=3.0.2
FILE: ./src/main/resources/data.sql
CREATE TABLE IF NOT EXISTS weather (
    city TEXT PRIMARY KEY,
    temperature INT
);

INSERT INTO weather (city, temperature) VALUES ('London', 20), ('Paris', 15);