.
‚îú‚îÄ‚îÄ .dockerignore
‚îú‚îÄ‚îÄ .mvn
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ wrapper
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ maven-wrapper.properties
‚îú‚îÄ‚îÄ Makefile
‚îú‚îÄ‚îÄ all_files_combined.txt
‚îú‚îÄ‚îÄ docker
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Dockerfile
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ docker-compose.yml
‚îú‚îÄ‚îÄ nginx
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ nginx.conf
‚îú‚îÄ‚îÄ pom.xml
‚îî‚îÄ‚îÄ src
    ‚îî‚îÄ‚îÄ main
        ‚îú‚îÄ‚îÄ java
        ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ com
        ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ example
        ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ WeatherApp.java
        ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ WeatherController.java
        ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ config
        ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ SwaggerConfig.java
        ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ model
        ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Weather.java
        ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ repository
        ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ WeatherRepository.java
        ‚îÇ¬†¬†         ‚îî‚îÄ‚îÄ service
        ‚îÇ¬†¬†             ‚îî‚îÄ‚îÄ WeatherService.java
        ‚îî‚îÄ‚îÄ resources
            ‚îú‚îÄ‚îÄ application.properties
            ‚îî‚îÄ‚îÄ data.sql

14 directories, 16 files


=== FILE CONTENTS ===

FILE: ./docker/docker-compose.yml
services:
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: weather-app
    container_name: weather-backend
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/weather_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      SPRING_DATASOURCE_DRIVER-CLASS-NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE-PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      LOGGING_FILE_NAME: /app/logs/weather-app.log
    networks:
      - weather-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    entrypoint: ["sh", "-c", "sleep 15 && java -jar app.jar"]
    volumes:
      - ../src/logs:/app/logs

  postgres:
    image: postgres:13-alpine
    container_name: weather-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: weather_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - weather-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  nginx:
    image: nginx:1.23-alpine
    container_name: weather-nginx
    ports:
      - "80:80"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ../nginx/logs:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - weather-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  postgres-data:

networks:
  weather-net:
    driver: bridge
FILE: ./docker/Dockerfile
# –°–±–æ—Ä–∫–∞ —Å –æ–±—Ä–∞–∑–æ–º Maven
FROM maven:3.8.7-eclipse-temurin-17 AS builder

WORKDIR /app

# POM –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
COPY pom.xml .
RUN mvn dependency:go-offline -B

COPY src ./src

# –°–±—Ä–æ–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
RUN mvn clean package -DskipTests -B

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ —Å JRE
FROM eclipse-temurin:17-jre-jammy
WORKDIR /app

COPY --from=builder /app/target/*.jar app.jar

EXPOSE 8080
ENTRYPOINT ["java", "-jar", "app.jar"]
FILE: ./Makefile
ALL: run
.PHONY: run stop

run:
	@echo "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
	
	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Docker
	@if ! docker info >/dev/null 2>&1; then \
		echo "üõë Docker Desktop –Ω–µ –∑–∞–ø—É—â–µ–Ω!"; \
		echo "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop"; \
		echo "2. –í–∫–ª—é—á–∏—Ç–µ WSL2 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"; \
		exit 1; \
	fi
	
	mvn clean package
	docker-compose -f docker/docker-compose.yml down
	docker compose -f docker/docker-compose.yml up -d --build
	@echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ"

stop:
	@echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
	docker compose -f docker/docker-compose.yml down
	mvn clean
	@find . -type f -name "*.log" -exec sh -c 'echo -n > "{}"' \;
	@echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

db: 
	docker exec -it weather-postgres psql -U postgres -d weather_db
FILE: ./nginx/nginx.conf
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
upstream backend {
    server weather-backend:8080; #–ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –Ω–∞ backend-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
}

server {
    listen 80;# –°–ª—É—à–∞–µ—Ç 80 –ø–æ—Ä—Ç
    server_name localhost; #–î–æ–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞
    access_log /var/log/nginx/access.log; # –õ–æ–≥ –¥–æ—Å—Ç—É–ø–∞
    error_log /var/log/nginx/error.log; # –õ–æ–≥ –æ—à–∏–±–æ–∫
    location / { 
        proxy_pass http://backend;# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ backend
        proxy_set_header Host $host;# –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ö–æ—Å—Ç
        proxy_set_header X-Real-IP $remote_addr;# –†–µ–∞–ª—å–Ω—ã–π IP –∫–ª–∏–µ–Ω—Ç–∞
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;#–¶–µ–ø–æ—á–∫–∞ –ø—Ä–æ–∫—Å–∏
        proxy_set_header X-Forwarded-Proto $scheme;#–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª (http/https)
        proxy_connect_timeout 60s;# –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        proxy_read_timeout 60s; #–¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è
    }

    location /swagger-ui/ {
        proxy_pass http://backend/swagger-ui/; 
    }

    location /v3/api-docs {
        proxy_pass http://backend/v3/api-docs; 
    }
}
FILE: ./pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>weather-app</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <name>Weather Application</name>
    <description>Spring Boot Weather App</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.0</version>
        <relativePath/>
    </parent>

    <properties>
        <java.version>17</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!-- –ë–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Spring Boot -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        
        <!-- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-logging</artifactId>
        </dependency>
        
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- –†–∞–±–æ—Ç–∞ —Å JSON -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>

        <!-- –î–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π -->
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <version>2.1.1</version>
        </dependency>

        <!-- –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <!-- Swagger -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.5.0</version>
        </dependency>       
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.3.1</version>
                <configuration>
                    <resources>
                        <resource>
                            <directory>src/main/resources</directory>
                            <filtering>true</filtering>
                        </resource>
                        <resource>
                            <directory>src/logs</directory>
                            <targetPath>${project.build.outputDirectory}/logs</targetPath>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
FILE: ./src/main/java/com/example/config/SwaggerConfig.java
package com.example.config;

import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.info.Contact;
import io.swagger.v3.oas.annotations.info.Info;
import io.swagger.v3.oas.annotations.info.License;
import io.swagger.v3.oas.annotations.servers.Server;
import org.springframework.context.annotation.Configuration;

@Configuration
@OpenAPIDefinition(
    info = @Info(
        title = "Weather API",
        version = "3.0.2",
        description = "API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ",
        contact = @Contact(
            name = "Irina Dimitrieva",
            email = "irina@example.com"
        ),
        license = @License(
            name = "MIT License",
            url = "https://opensource.org/licenses/MIT"
        )
    ),
    servers = {
        @Server(
            url = "http://localhost:8080",
            description = "–õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä"
        )
    }
)
public class SwaggerConfig {
}

FILE: ./src/main/java/com/example/model/Weather.java
package com.example.model;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "weather")
@Schema(description = "–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –≤ –≥–æ—Ä–æ–¥–µ")
public class Weather {
    @Id
    @Schema(description = "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞", example = "Berlin")
    private String city;
    
    @Schema(description = "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è", example = "20")
    private int temperature;

    public Weather() {}

    public Weather(String city, int temperature) {
        this.city = city;
        this.temperature = temperature;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public int getTemperature() {
        return temperature;
    }

    public void setTemperature(int temperature) {
        this.temperature = temperature;
    }
}
FILE: ./src/main/java/com/example/repository/WeatherRepository.java
package com.example.repository;

import com.example.model.Weather;
import org.springframework.data.jpa.repository.JpaRepository;

public interface WeatherRepository extends JpaRepository<Weather, String> {
}
FILE: ./src/main/java/com/example/service/WeatherService.java
package com.example.service;
import org.springframework.scheduling.annotation.Scheduled;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import com.example.model.Weather;
import com.example.repository.WeatherRepository;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.Map;

@Slf4j
@Service
@Tag(name = "Weather Service", description = "–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ")
public class WeatherService {
    private static final String API_URL = "https://api.open-meteo.com/v1/forecast";
    private final WeatherRepository weatherRepo;

    private static final Map<String, double[]> CITIES = Map.of(
        "Berlin", new double[]{52.52, 13.41},
        "London", new double[]{51.51, -0.13},
        "Paris", new double[]{48.85, 2.35}
    );

    @Autowired
    public WeatherService(WeatherRepository weatherRepo) {
        this.weatherRepo = weatherRepo;
    }

    // @PostConstruct
    // @Scheduled(fixedRateString = "${weather.update.interval}")
    //     public void scheduledUpdate() {
    //     log.info("–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é");
    //     updateAllCities();
    // }
    // public void updateAllCities() {
    //     weatherRepo.findAll().forEach(weather -> {
    //         log.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤...");
    //         try {
    //             updateCityWeather(weather.getCity());
    //         } catch (Exception e) {
    //             log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ {}: {}", weather.getCity(), e.getMessage());
    //             saveDefaultTemp(weather.getCity());
    //         }
    //     });
    // }

    // @Operation(
    //     summary = "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞",
    //     description = "–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
    //     responses = {
    //         @ApiResponse(
    //             responseCode = "200",
    //             description = "–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
    //             content = @Content(mediaType = "application/json")
    //         ),
    //         @ApiResponse(
    //             responseCode = "404",
    //             description = "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
    //             content = @Content(mediaType = "application/json")
    //         )
    //     }
    // )
    // public boolean updateCityWeather(String city) throws Exception {
    //     double[] coords = getCityCoordinates(city);
    //     double temperature = fetchCurrentTemperature(coords[0], coords[1]);
    //     Weather weather = weatherRepo.findById(city).orElse(new Weather(city, 0));
    //     weather.setTemperature((int) Math.round(temperature));
    //     weatherRepo.save(weather);
    //     return true;
    // }

    @Operation(
        summary = "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤",
        description = "–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
        responses = {
            @ApiResponse(
                responseCode = "200",
                description = "–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤",
                content = @Content(mediaType = "application/json")
            ),
            @ApiResponse(
                responseCode = "500",
                description = "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
                content = @Content(mediaType = "application/json")
            )
        }
    )

    private void saveDefaultTemp(String city) {
        Weather weather = weatherRepo.findById(city).orElse(new Weather(city, 0));
        weather.setTemperature(20); // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        weatherRepo.save(weather);
    }

    private double[] getCityCoordinates(String city) {
        if (CITIES.containsKey(city)) {
            return CITIES.get(city);
        }
        throw new IllegalArgumentException("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: " + city);
    }

    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –≥–æ—Ä–æ–¥–∞",
        description = "–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ API Open-Meteo.",
        responses = {
            @ApiResponse(
                responseCode = "200",
                description = "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞",
                content = @Content(mediaType = "application/json")
            ),
            @ApiResponse(
                responseCode = "500",
                description = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã",
                content = @Content(mediaType = "application/json")
            )
        }
    )
    public double fetchCurrentTemperature(double latitude, double longitude) throws Exception {
        RestTemplate restTemplate = new RestTemplate();
        String url = String.format("%s?latitude=%f&longitude=%f&current_weather=true", API_URL, latitude, longitude);
        String response = restTemplate.getForObject(url, String.class);

        ObjectMapper mapper = new ObjectMapper();
        JsonNode root = mapper.readTree(response);
        return root.path("current_weather").path("temperature").asDouble();
    }
}

FILE: ./src/main/java/com/example/WeatherApp.java
package com.example;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class WeatherApp {
    public static void main(String[] args) {
        SpringApplication.run(WeatherApp.class, args);
    }
}
FILE: ./src/main/java/com/example/WeatherController.java
package com.example.controller;

import com.example.model.Weather;
import com.example.repository.WeatherRepository;
import com.example.service.WeatherService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;

@RestController
@Tag(name = "Weather API", description = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ")
public class WeatherController {

    private final WeatherRepository weatherRepository;
    private final WeatherService weatherService;
    private static final Logger log = LoggerFactory.getLogger(WeatherController.class);

    public WeatherController(WeatherRepository weatherRepository, WeatherService weatherService) {
        this.weatherRepository = weatherRepository;
        this.weatherService = weatherService;
    }

    @GetMapping(value = "/ping", produces = MediaType.TEXT_HTML_VALUE)
    public ResponseEntity<String> ping() {
        log.info("Ping –∑–∞–ø—Ä–æ—Å");
        return ResponseEntity.ok("<html><body><h1>PONG</h1></body></html>");
    }

    @GetMapping(value = "/health", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<String> health() {
        log.info("–ó–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞");
        return ResponseEntity.ok("{\"status\": \"HEALTHY\"}");
    }

    @GetMapping(value = "/list", produces = MediaType.TEXT_HTML_VALUE)
    public ResponseEntity<String> list() {
        log.info("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ —Å –ø–æ–≥–æ–¥–æ–π");
        List<Weather> weatherList = weatherRepository.findAll();
        if (weatherList.isEmpty()) {
            log.warn("–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç");
            return ResponseEntity.status(HttpStatus.NO_CONTENT)
                .body("<html><body><h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2><p>–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å –ø–æ–≥–æ–¥–æ–π –ø–æ–∫–∞ –ø—É—Å—Ç.</p></body></html>");
        }

        StringBuilder html = new StringBuilder("<html><body><ul>");
        for (Weather weather : weatherList) {
            html.append("<li>")
                .append(escapeHtml(weather.getCity()))
                .append(": ")
                .append(weather.getTemperature())
                .append("¬∞C</li>");
        }
        html.append("</ul></body></html>");
        return ResponseEntity.ok(html.toString());
    }

    @Operation(
        summary = "–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ",
        description = "–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
        responses = {
            @ApiResponse(
                responseCode = "200",
                description = "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                content = @Content(mediaType = "text/html")
            ),
            @ApiResponse(
                responseCode = "400",
                description = "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞"
            ),
            @ApiResponse(
                responseCode = "500",
                description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
            )
        }
    )
    @PostMapping(value = "/add", produces = MediaType.TEXT_HTML_VALUE)
    public ResponseEntity<String> add(
        @RequestParam String city,
        @RequestParam(required = false) Integer temperature,
        @RequestParam(defaultValue = "false") boolean forceUpdate
    ) {
        log.info("–ó–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ—Ä–æ–¥–∞: {}", city);

        if (city == null || city.trim().isEmpty()) {
            String msg = "–ü–∞—Ä–∞–º–µ—Ç—Ä 'city' –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º.";
            log.error(msg);
            return ResponseEntity.badRequest().body(errorHtml(msg));
        }
        if (!city.matches("[a-zA-Z\\s-]+")) {
            String msg = "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã.";
            log.error(msg + " –ü–æ–ª—É—á–µ–Ω–æ: " + city);
            return ResponseEntity.badRequest().body(errorHtml(msg));
        }

        try {
            int tempToSave;
            String updateInfo;

            if (temperature != null) {
                tempToSave = temperature;
                updateInfo = "<p>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é.</p>";
            } else {
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∑–æ–≤ –≤–Ω–µ—à–Ω–µ–≥–æ API –∏–ª–∏ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                tempToSave = 20; // –∑–∞–≥–ª—É—à–∫–∞
                updateInfo = "<p>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 20¬∞C.</p>";
            }

            boolean cityExists = weatherRepository.existsById(city);
            if (cityExists && !forceUpdate) {
                String msg = "–ì–æ—Ä–æ–¥ \"" + city + "\" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. " +
                             "–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä forceUpdate=true.";
                log.warn(msg);
                return ResponseEntity.status(HttpStatus.CONFLICT).body(errorHtml(msg));
            }

            weatherRepository.save(new Weather(city, tempToSave));
            log.info("–ì–æ—Ä–æ–¥ {} —É—Å–ø–µ—à–Ω–æ {} —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π {}¬∞C", city, cityExists ? "–æ–±–Ω–æ–≤–ª–µ–Ω" : "–¥–æ–±–∞–≤–ª–µ–Ω", tempToSave);

            return ResponseEntity.ok(
                "<html><body><h2>–£—Å–ø–µ—Ö!</h2>" +
                "<p>–ì–æ—Ä–æ–¥ \"" + escapeHtml(city) + "\" " +
                (cityExists ? "–æ–±–Ω–æ–≤–ª–µ–Ω" : "–¥–æ–±–∞–≤–ª–µ–Ω") +
                " —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π " + tempToSave + "¬∞C.</p>" +
                updateInfo +
                "</body></html>"
            );

        } catch (Exception e) {
            String errorMsg = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage();
            log.error(errorMsg, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorHtml(errorMsg));
        }
    }

    @DeleteMapping(value = "/delete", produces = MediaType.TEXT_HTML_VALUE)
    public ResponseEntity<String> delete(
        @RequestParam(required = false) String city,
        @RequestParam(defaultValue = "false") boolean all
    ) {
        log.info("–ó–∞–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ—Ä–æ–¥–∞: {}, —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö: {}", city, all);
        try {
            if (all) {
                weatherRepository.deleteAll();
                log.info("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã");
                return ResponseEntity.ok(
                    "<html><body><h2>–£—Å–ø–µ—Ö!</h2><p>–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.</p></body></html>");
            }

            if (city == null || city.trim().isEmpty()) {
                String msg = "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä 'city', " +
                             "–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä all=true –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö.";
                log.error(msg);
                return ResponseEntity.badRequest().body(errorHtml(msg));
            }

            if (!weatherRepository.existsById(city)) {
                String msg = "–ì–æ—Ä–æ–¥ \"" + city + "\" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.";
                log.warn(msg);
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorHtml(msg));
            }

            weatherRepository.deleteById(city);
            log.info("–ì–æ—Ä–æ–¥ {} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", city);
            return ResponseEntity.ok(
                "<html><body><h2>–£—Å–ø–µ—Ö!</h2><p>–ì–æ—Ä–æ–¥ \"" + escapeHtml(city) + "\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.</p></body></html>");
        } catch (Exception e) {
            String errorMsg = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage();
            log.error(errorMsg, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorHtml(errorMsg));
        }
    }

    private String errorHtml(String message) {
        return "<html><body><h2>–û—à–∏–±–∫–∞!</h2><p>" + escapeHtml(message) + "</p></body></html>";
    }

    private String escapeHtml(String input) {
        if (input == null) return "";
        return input.replace("&", "&amp;")
                    .replace("<", "&lt;")
                    .replace(">", "&gt;")
                    .replace("\"", "&quot;")
                    .replace("'", "&#39;");
    }
}

FILE: ./src/main/resources/application.properties
spring.jpa.hibernate.ddl-auto=update
logging.file.name=/app/logs/weather-app.log
spring.datasource.url=jdbc:postgresql://localhost:5432/weather_db
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.jpa.show-sql=true
spring.sql.init.mode=always

FILE: ./src/main/resources/data.sql
CREATE TABLE IF NOT EXISTS weather (
    city TEXT PRIMARY KEY,
    temperature INT
);

DELETE FROM weather;
INSERT INTO weather (city, temperature) VALUES 
  ('London', 20), 
  ('Paris', 15), 
  ('Moscow', 17);
