name: CI/CD Pipeline

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main"]

env:
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'postgres' }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Maven Wrapper
        run: |
          if [ ! -f "mvnw" ]; then
            mvn -N wrapper:wrapper -Dmaven=3.9.6
          fi
          chmod +x mvnw
          ./mvnw --version

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            target/
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: ./mvnw clean package -DskipTests

      - name: Build Docker containers
        run: |
          docker-compose -f docker/docker-compose.yml build
          docker images

      - name: Save Docker images
        run: |
          mkdir -p docker-images
          docker save -o docker-images/backend.tar weather-app
          docker save -o docker-images/postgres.tar postgres:13-alpine
          ls -lh docker-images/

      - name: Upload Docker images
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: docker-images/*.tar
          retention-days: 1

  test:
    needs: build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: weather_db
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Download Docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: docker-images

      - name: Load Docker images
        run: |
          docker load -i docker-images/backend.tar
          docker load -i docker-images/postgres.tar
          docker images

      - name: Start backend
        run: |
          docker run -d --name weather-backend \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/weather_db \
            -e SPRING_DATASOURCE_USERNAME=postgres \
            -e SPRING_DATASOURCE_PASSWORD=${{ env.POSTGRES_PASSWORD }} \
            -p 8080:8080 \
            weather-app
          sleep 15

      - name: Run health checks
        run: |
          curl -s http://localhost:8080/health | jq .
          curl -s http://localhost:8080/ping
          url -s http://localhost/ping
          pg_isready -h localhost -U postgres

      - name: Cleanup
        if: always()
        run: |
          docker stop weather-backend || true
          docker rm weather-backend || true
          docker system prune -f