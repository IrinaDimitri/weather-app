name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

env:
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'postgres' }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Maven Wrapper
        run: |
          if [ ! -f "mvnw" ]; then
            mvn -N wrapper:wrapper -Dmaven=3.9.6
          fi
          chmod +x mvnw
          ./mvnw --version

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            target/
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: ./mvnw clean package -DskipTests

      - name: Build Docker containers
        run: docker-compose -f docker/docker-compose.yml build

      - name: Save Docker images
        run: |
          mkdir -p docker-images
          docker save -o docker-images/backend.tar weather-app
          docker save -o docker-images/postgres.tar postgres:13-alpine
          ls -lh docker-images/

      - name: Upload Docker images
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: docker-images/*.tar
          retention-days: 1

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download Docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: docker-images

      - name: Load Docker images
        run: |
          docker load -i docker-images/backend.tar
          docker load -i docker-images/postgres.tar
          docker images

      - name: Start services with healthcheck
        run: |
          docker-compose -f docker/docker-compose.yml up -d
          timeout 60s bash -c 'until docker-compose exec postgres pg_isready -U postgres; do sleep 2; done'
          docker-compose ps

      - name: Run API tests
        run: |
          echo "Testing endpoints:"
          curl -s http://localhost:8080/health | jq -e '.status == "HEALTHY"' || exit 1
          curl -s http://localhost:8080/ping | grep -q "PONG" || exit 1
          echo "All tests passed!"

      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker/docker-compose.yml down --volumes
          docker system prune -af