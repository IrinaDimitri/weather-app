name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'postgres' }}

    steps:
      # Шаг 1: Получение кода
      - uses: actions/checkout@v3

      # Шаг 2: Установка Java
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Шаг 3: Проверка наличия mvnw
      - name: Verify Maven Wrapper
        run: |
          ls -la mvnw* .mvn/ || true
          if [ ! -f "mvnw" ]; then
            echo "Maven Wrapper not found, generating..."
            mvn -N wrapper:wrapper
          fi
          chmod +x mvnw

      # Шаг 4: Кэширование Maven-зависимостей
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      # Шаг 5: Сборка проекта (из корня!)
      - name: Build with Maven
        run: |
          ./mvnw clean package -DskipTests

      # Шаг 6: Сборка Docker-образов
      - name: Build Docker containers
        run: |
          docker-compose -f docker/docker-compose.yml build

      # Шаг 7: Сохранение образов
      - name: Save Docker images
        run: |
          mkdir -p docker-images
          docker save -o docker-images/backend.tar weather-app
          docker save -o docker-images/postgres.tar postgres:13-alpine

      # Шаг 8: Сохранение артефактов
      - name: Upload Docker images
        uses: actions/upload-artifact@v3
        with:
          name: docker-images
          path: docker-images/*.tar
          retention-days: 1

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Получение кода
      - uses: actions/checkout@v3

      # Шаг 2: Загрузка сохраненных образов
      - name: Download Docker images
        uses: actions/download-artifact@v3
        with:
          name: docker-images

      # Шаг 3: Загрузка образов в Docker
      - name: Load Docker images
        run: |
          docker load -i docker-images/backend.tar
          docker load -i docker-images/postgres.tar

      # Шаг 4: Запуск контейнеров
      - name: Start services
        run: |
          docker-compose -f docker/docker-compose.yml up -d
          sleep 15  # Ожидаем инициализации БД
          docker-compose ps

      # Шаг 5: Проверка работы
      - name: Run health checks
        run: |
          # Проверка backend
          echo "Testing /health endpoint:"
          curl -s http://localhost:8080/health | jq .
          
          echo "Testing /ping endpoint:"
          curl -s http://localhost:8080/ping
          
          # Проверка PostgreSQL
          echo "Testing PostgreSQL connection:"
          docker-compose exec postgres pg_isready -U postgres

      # Шаг 6: Остановка контейнеров
      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker/docker-compose.yml down